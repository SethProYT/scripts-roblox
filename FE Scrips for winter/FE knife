HumanDied = false
loadstring(game:HttpGet(('https://raw.githubusercontent.com/XeneonPlays/Nexo/main/NexoReanimate'),true))()

IT = Instance.new
CF = CFrame.new
VT = Vector3.new
RAD = math.rad
C3 = Color3.new
UD2 = UDim2.new
BRICKC = BrickColor.new
ANGLES = CFrame.Angles
EULER = CFrame.fromEulerAnglesXYZ
COS = math.cos
ACOS = math.acos
SIN = math.sin
ASIN = math.asin
ABS = math.abs
MRANDOM = math.random
FLOOR = math.floor

speed = 1
sine = 1
srv = game:GetService('RunService')

function setuptrail(parent,Pos1,Pos2,Color,LT,LE,Texture)
IT = Instance.new
local Part1 = parent
local A1 = IT("Attachment",Part1)
A1.Position = Pos1
A1.Name = "ATH10"
local B1 = IT("Attachment",Part1)
B1.Position = Pos2
B1.Name = "ATH11"
local Trail1 = IT("Trail",Part1)
Trail1.Name = "Nexo Trail"
Trail1.Color = Color
Trail1.Attachment0 = B1
Trail1.Attachment1 = A1
Trail1.Lifetime = LT
Trail1.LightEmission = LE
Trail1.Transparency = NumberSequence.new({NumberSequenceKeypoint.new(0, 0),NumberSequenceKeypoint.new(1, 1)})
Trail1.Texture = Texture
Trail1.Enabled = true
end
local RunningAnim = {
    ["Idle"] = true,
    ["Walk"] = false,
    ["Jump"] = false,
    ["Fall"] = false,
    ["Run"] = false
}

local function Punch()
    if RunningAnim.Idle then
        --idled punch clerp here
    elseif RunningAnim.Walk then
        --walking punch clerp here
    elseif RunningAnim.Jump then
        --jumped punch clerp here
    elseif RunningAnim.Fall then
        --falling punch clerp here
    elseif RunningAnim.Run then
        --running punch clerp here
    end
end

game:GetService("UserInputService").InputEnded:Connect(function(gp,inp)
    if not gp and inp.KeyCode == Enum.KeyCode.F then
        Punch()
    end
end)
--                          |
--put the setup trail below v

--put the hat script converted below

reanim = game.Players.LocalPlayer.Character
RJ = reanim.HumanoidRootPart.RootJoint
RS = reanim.Torso['Right Shoulder']
LS = reanim.Torso['Left Shoulder']
RH = reanim.Torso['Right Hip']
LH = reanim.Torso['Left Hip']
Root = reanim.HumanoidRootPart
NECK = reanim.Torso.Neck
NECK.C0 = CF(0,1,0)*ANGLES(RAD(0),RAD(0),RAD(0))
NECK.C1 = CF(0,-0.5,0)*ANGLES(RAD(0),RAD(0),RAD(0))
RJ.C1 = CF(0,0,0)*ANGLES(RAD(0),RAD(0),RAD(0))
RJ.C0 = CF(0,0,0)*ANGLES(RAD(0),RAD(0),RAD(0))
RS.C1 = CF(-0.5,0.5,0)*ANGLES(RAD(0),RAD(0),RAD(0))
LS.C1 = CF(0.5,0.5,0)*ANGLES(RAD(0),RAD(0),RAD(0))
RH.C1 = CF(0,1,0)*ANGLES(RAD(0),RAD(0),RAD(0))
LH.C1 = CF(0,1,0)*ANGLES(RAD(0),RAD(0),RAD(0))
RH.C0 = CF(0,0,0)*ANGLES(RAD(0),RAD(0),RAD(0))
LH.C0 = CF(0,0,0)*ANGLES(RAD(0),RAD(0),RAD(0))
RS.C0 = CF(0,0,0)*ANGLES(RAD(0),RAD(0),RAD(0))
LS.C0 = CF(0,0,0)*ANGLES(RAD(0),RAD(0),RAD(0))

coroutine.wrap(function()
    while true do -- anim changer
if HumanDied then break end
sine = sine + speed
if Root.Velocity.y > 1 then -- jump
    for i,v in pairs(RunningAnim) do
        RunningAnim[tostring(v)] = false
    end
    RunningAnim.Jump = true
--jump clerp here
elseif Root.Velocity.y < -1 then -- fall
    for i,v in pairs(RunningAnim) do
        RunningAnim[tostring(v)] = false
    end
    RunningAnim.Fall = true
--fall clerp here
elseif Root.Velocity.Magnitude < 2 then -- idle
    for i,v in pairs(RunningAnim) do
        RunningAnim[tostring(v)] = false
    end
    RunningAnim.Idle = true
    hatset('White SS','Left Arm',CFrame.new(),reanim['White SS'].Handle.AccessoryWeld.C0:Lerp(CF(0+0*math.cos(sine/13),0.9+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(-68+0*math.cos(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(0+0*math.cos(sine/13))),1),false)

    reanim['White SS'].Handle.AccessoryWeld.C0 = reanim['White SS'].Handle.AccessoryWeld.C0:Lerp(CF(0+0*math.cos(sine/13),0.9+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(-68+0*math.cos(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(0+0*math.cos(sine/13))),.1)
    NECK.C0 = NECK.C0:Lerp(CF(0+0*math.cos(sine/13),1+0*math.sin(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+0*math.sin(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(0+0*math.sin(sine/13))),.1)
    RJ.C0 = RJ.C0:Lerp(CF(0+0*math.cos(sine/13),0+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+0*math.sin(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(0+0*math.sin(sine/13))),.1)
    RS.C0 = RS.C0:Lerp(CF(1+0*math.cos(sine/13),0.5+0*math.sin(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(-6+0*math.sin(sine/13)),RAD(-15+2*math.cos(sine/13)),RAD(0+0*math.sin(sine/13))),.1)
    LS.C0 = LS.C0:Lerp(CF(-1+0*math.cos(sine/13),0.5+0*math.sin(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+0*math.sin(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(0+0*math.sin(sine/13))),.1)
    RH.C0 = RH.C0:Lerp(CF(0.5+0*math.cos(sine/13),-1+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+0*math.sin(sine/13)),RAD(-26+2*math.cos(sine/13)),RAD(0+0*math.sin(sine/13))),.1)
    LH.C0 = LH.C0:Lerp(CF(-0.5+0*math.cos(sine/13),-1+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+0*math.sin(sine/13)),RAD(43+0*math.cos(sine/13)),RAD(0+0*math.sin(sine/13))),.1)
elseif Root.Velocity.Magnitude < 20 then -- walk
    for i,v in pairs(RunningAnim) do
        RunningAnim[tostring(v)] = false
    end
    RunningAnim.Walk = true
    hatset('White SS','Left Arm',CFrame.new(),reanim['White SS'].Handle.AccessoryWeld.C0:Lerp(CF(0+0*math.cos(sine/13),0.9+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(-68+0*math.cos(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(0+0*math.cos(sine/13))),1),false)

    reanim['White SS'].Handle.AccessoryWeld.C0 = reanim['White SS'].Handle.AccessoryWeld.C0:Lerp(CF(0+0*math.cos(sine/13),0.9+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(-68+0*math.cos(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(0+0*math.cos(sine/13))),.1)
    NECK.C0 = NECK.C0:Lerp(CF(0+0*math.cos(sine/13),1+0*math.sin(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+0*math.sin(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(0+0*math.sin(sine/13))),.1)
    RJ.C0 = RJ.C0:Lerp(CF(0+0*math.cos(sine/13),0+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(-19+0*math.sin(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(0+0*math.sin(sine/13))),.1)
    RS.C0 = RS.C0:Lerp(CF(1+0*math.cos(sine/13),0.5+0*math.sin(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(39+0*math.sin(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(0+0*math.sin(sine/13))),.1)
    LS.C0 = LS.C0:Lerp(CF(-1+0*math.cos(sine/13),0.5+0*math.sin(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(50+36*math.sin(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(0+0*math.sin(sine/13))),.1)
    RH.C0 = RH.C0:Lerp(CF(0.5+0*math.cos(sine/13),-1+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(3+45*math.sin(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(0+0*math.sin(sine/13))),.1)
    LH.C0 = LH.C0:Lerp(CF(-0.5+0*math.cos(sine/13),-1+0*math.cos(sine/13),0+0*math.cos(sine/13))*ANGLES(RAD(0+-46*math.sin(sine/13)),RAD(0+0*math.cos(sine/13)),RAD(0+0*math.sin(sine/13))),.1)
elseif Root.Velocity.Magnitude > 20 then -- run
    for i,v in pairs(RunningAnim) do
        RunningAnim[tostring(v)] = false
    end
    RunningAnim.Run = true
--run clerp here
end
srv.RenderStepped:Wait()
end
end)()
